#!/usr/bin/env python
# -*- coding:utf-8 -*-

from sleekxmpp.xmlstream import ET, tostring
from multiprocessing import Process,Lock
import Adafruit_BMP.BMP085 as BMP085
from optparse import OptionParser
import RPi.GPIO as GPIO
import ConfigParser
import threading
import sleekxmpp
import commands
import logging
import getpass
import os.path
import time
import sys

sensor = BMP085.BMP085(busnum=0)

if sys.version_info < (3,0):
    reload(sys)
    sys.setdefaultencoding('utf8')
else :
    raw_input = input

class RaspberryGpio(threading.Thread) :

    '''  Raspberry GPIO class. It has methods which
        gets data from sensors and controls peripherals
    '''

    def __init__(self) :

        threading.Thread.__init__(self)
        GPIO.setwarnings(False)
        GPIO.setmode(GPIO.BOARD)
        # Initial state for each device
        global device_state
        device_state = {'switch':None}
        # IO pin for devices
        global device_pin
        device_pin = {'switch':7}
        # Set IO pin for each device
        for key in device_pin :
            GPIO.setup(device_pin[key],GPIO.OUT)

    def setOutput(self,dev_pin,dev_state) :
    # Sets output value for a specific device
        if (dev_state == "True" or dev_state == "true") :
            GPIO.output(int(dev_pin),True)
        elif (dev_state == "False" or dev_state == "false") :
            GPIO.output(int(dev_pin),False)

    def run(self) :
        global device_val
        # val_temp stores the previous sensor readings
        val_temp = {'temperature':0.0,'pressure':0.0,'altitude':0.0,
                    'switch':device_state['switch'],'soc_temp':0.0,
                    'arm_freq':0.0,'core_freq':0.0,'core_volt':0.0,
                    'sdram_volt':0.0
                   }
        while True:
            time.sleep(int(polling))
            # BMP180 sensor readings
            temperature = sensor.read_temperature()
            pressure = sensor.read_pressure()
            altitude = sensor.read_altitude()
            device_val = {'temperature':temperature,
                             'pressure':pressure,
                             'altitude':altitude, 'switch':False,
                             'soc_temp':None, 'arm_freq':None,
                             'core_freq':None, 'core_volt':None,
                             'sdram_volt':None
                          }
            vcgencmd = {'soc_temp':"measure_temp",
                        'core_volt':"measure_volts",
                        'arm_freq':"measure_clock arm",
                        'core_freq':"measure_clock core",
                        'sdram_volt':"measure_volts sdram_c"
                       }
            replace_1 = {'soc_temp':"temp=",'core_volt':"volt=",
                         'arm_freq':"frequency(45)=",
                         'core_freq':"frequency(1)=",
                         'sdram_volt':"volt="
                        }
            replace_2 = {'soc_temp':"\'C",'core_volt':"V",
                         'sdram_volt':"V"
                        }
            # Raspberry Pi parameter readings
            for key in vcgencmd :
                device_val[key] = commands.getoutput(
                                    '/opt/vc/bin/vcgencmd '
                                    + vcgencmd[key]
                                    )
            for key in replace_1 :
                device_val[key] = device_val[key].replace(
                                                 replace_1[key],''
                                                 )
            for key in replace_2 :
                device_val[key] = device_val[key].replace(
                                                 replace_2[key],''
                                                 )
            for key in device_val :
                if(key != 'switch') :
                    device_val[key] = float(device_val[key])

            device_val['core_freq'] = device_val['core_freq'] / 1000000
            device_val['arm_freq'] = device_val['arm_freq'] / 1000000
            device_val['pressure'] = device_val['pressure'] / 100000
            device_val['pressure'] = round(device_val['pressure'],4)
            device_val['pressure'] = float(device_val['pressure'])
            device_val['altitude'] = round(device_val['altitude'],2)
            device_val['altitude'] = float(device_val['altitude'])
            for key in device_val:
                print "%s - %s" % (val_temp[key],device_val[key])
            #   We will publish a notification on the pubsub node
            # in case that sensor values have been modified with
            # 5 percents comparing to the previous values ( this
            # does not include the switch state ) :
            for key in device_val :
                for key2 in device_pin:
                    if(key != key2 ) :
                        if(device_val[key] >= val_temp[key] + 
                                (0.005 * val_temp[key]) or 
                                device_val[key] <= val_temp[key]
                                - (0.005 * val_temp[key])
                                ) :
                             modified = True
                             break
            if modified == True :
                xmpp.publish("Data has been modified")
                modified = False
            val_temp = device_val


class XmppClass(sleekxmpp.ClientXMPP) :

    '''  Xmpp client class
    '''
    def __init__(self,jid,password,server,node) :
        super(XmppClass,self).__init__(jid,password)
        self.register_plugin('xep_0030')
        self.register_plugin('xep_0004')
        self.register_plugin('xep_0060')
        self.register_plugin('xep_0199')
        self.register_plugin('xep_0059')
        self.node = node
        self.pubsub_server = server

        self.add_event_handler('session_start',self.start)
        self.add_event_handler('message',self.message)


    def start(self,event) :
        self.send_presence()

    def message(self,msg):
        if msg['type'] in ('normal','chat') :
            logger.info(msg)
            # Message splitting
            message_string = msg['body'].split(" ")

            if (message_string[0] == 'GET'):
            # GET command :
                output_vals = {}
                for i in message_string[1:] :
                #  Only devices which exists
                # will be returned with its value
                    if device_val.has_key(i) :
                        output_vals[i] = device_val[i]
                # XMPP Message Composition and reply
                mymsg = ' '.join(['%s=%s' % (key, value)
                                 for (key, value)
                                 in output_vals.items()])
                msg.reply(mymsg).send()
                logger.info(msg)

            elif (message_string[0] == 'SET') :
            # SET command :
                my_device = {}
                for i in message_string[1:] :
                # Creating dictionary with devices and control values
                    device = i.split("=")
                    my_device[device[0]] = device[1]
                for key in my_device :
                #  If device exists in device_state dictionary, then
                # it will change the state of that device
                    if device_state.has_key(key) :
                        device_state[key] = my_device[key]
                        device_val[key] = my_device[key]
                        rgpio.setOutput(device_pin[key],
                                        device_state[key])
                # XMPP Message Composition and reply
                mymsg = ' '.join(['%s=%s' % (key,value)
                                 for (key,value)
                                 in device_state.items()])
                msg.reply(mymsg).send()
                logger.info(msg)

            else :
            # HELP or invalid command
                error_message = "Available commands \n \
                                  GET device ... \n \
                                  SET device=value ... "
                msg.reply(error_message).send()
                logger.info(msg)

    def publish(self,data):

        payload = ET.fromstring("<test xmlns='test'>%s</test>" % data)
        try:
            result = self['xep_0060'].publish(self.pubsub_server,
                                              self.node,
                                              payload=payload)
            id = result['pubsub']['publish']['item']['id']
            print "\n %s" % data

        except:
            logging.error('Could not publish to: %s' % self.node)

if __name__ == '__main__':

    # Setup the command line arguments.
    optp=OptionParser()

    optp.add_option('-c', '--config=FILE', dest= "conf_file",
                    help = 'configuration FILE')
    optp.add_option('-d','--debug', help = 'set logging to DEBUG',
                    action = 'store_const',dest = 'loglevel',
                    const = logging.DEBUG,default = logging.INFO)
    optp.add_option('-l', '--log=FILE', dest= "log_file",
                    help = 'log messages to FILE')

    opts, args = optp.parse_args()

    logging.basicConfig(level = opts.loglevel,
                        format = '%(levelname)-8s %(message)s')

    # If configuration file does not exist it will exit the script
    if not (os.path.isfile(opts.conf_file)) :
        print "The configuration file does not exist"
        sys.exit()

    # Reading data from configuration file
    conf = ConfigParser.ConfigParser()
    conf.read(opts.conf_file)

    username = conf.get("XMPP","username")
    password = conf.get("XMPP","password")
    node = conf.get("XMPP","node")

    global polling
    polling = conf.get("Device","polling")

    # PubSub Server
    name_lst = username.split("@")
    name_lst2 = name_lst[1].split("/")
    pubsub_server = "pubsub." + name_lst2[0]


    global xmpp
    xmpp = XmppClass(username, password,
                     pubsub_server, node)

    # Starting GPIO sensor reading thread
    global rgpio
    rgpio = RaspberryGpio()
    rgpio.start()

    # Logging
    logger = logging.getLogger('cydonix_log')
    logger.setLevel(logging.DEBUG)
    fh = logging.FileHandler('cydonix_agent.log')
    fh.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.ERROR)
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    fh.setFormatter(formatter)
    ch.setFormatter(formatter)
    logger.addHandler(fh)
    logger.addHandler(ch)

    # Connecting to the XMPP Server
    try :
        host = conf.get("XMPP","host")
        port = conf.get("XMPP","port")
        if xmpp.connect(host,port):
            xmpp.process()
        else :
            print "Unable to connect!"

    except ConfigParser.NoOptionError :
        print "Could not find host and port"
        if xmpp.connect() :
            xmpp.process()
        else :
            print "Unable to connect!"
